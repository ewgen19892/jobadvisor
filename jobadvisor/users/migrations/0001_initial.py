# Generated by Django 2.2 on 2019-05-02 15:01

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import jobadvisor.common.helpers
import jobadvisor.users.models.user


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('companies', '0001_initial'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email address')),
                ('first_name', models.CharField(max_length=30, null=True, verbose_name='First name')),
                ('last_name', models.CharField(max_length=150, null=True, verbose_name='Last name')),
                ('phone', models.CharField(max_length=15, null=True, verbose_name='Phone number')),
                ('photo', models.ImageField(null=True, upload_to=jobadvisor.common.helpers.upload_to)),
                ('level', models.PositiveIntegerField(choices=[(0, 'Trainee'), (1, 'Employee'), (2, 'Employer')], default=1, verbose_name='Level')),
                ('is_banned', models.BooleanField(default=False, verbose_name='Is banned')),
                ('is_active', models.BooleanField(default=False, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='Active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['pk'],
            },
            managers=[
                ('objects', jobadvisor.users.models.user.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Institute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Institute name')),
            ],
            options={
                'verbose_name': 'Institute',
                'verbose_name_plural': 'Institutes',
                'ordering': ['pk'],
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Skill',
                'verbose_name_plural': 'Skills',
                'ordering': ['pk'],
            },
        ),
        migrations.CreateModel(
            name='Resume',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=jobadvisor.common.helpers.upload_to, verbose_name='File')),
                ('experience', models.FloatField(verbose_name='Experience in years')),
                ('certificates', models.TextField(null=True, verbose_name='Certificates')),
                ('description', models.TextField(null=True, verbose_name='Description')),
                ('salary', models.PositiveIntegerField(verbose_name='Salary')),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='resumes', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('position', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resumes', to='companies.Position', verbose_name='Position')),
                ('skills', models.ManyToManyField(related_name='resumes', to='users.Skill', verbose_name='Skills')),
            ],
            options={
                'verbose_name': 'Resume',
                'verbose_name_plural': 'Resumes',
                'ordering': ['pk'],
            },
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveIntegerField(choices=[(0, 'Trainee'), (1, 'Employee')], default=1, verbose_name='Level')),
                ('salary', models.PositiveIntegerField(verbose_name='Salary')),
                ('started_at', models.DateField(verbose_name='Started working at')),
                ('finished_at', models.DateField(null=True, verbose_name='Finished working at')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='companies.Company', verbose_name='Company')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='companies.Position', verbose_name='Position')),
            ],
            options={
                'verbose_name': 'Job',
                'verbose_name_plural': 'Jobs',
                'ordering': ['pk'],
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(null=True, verbose_name='Description')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to='companies.Company', verbose_name='Company')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'verbose_name': 'Favorite',
                'verbose_name_plural': 'Favorites',
                'ordering': ['pk'],
            },
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('graduated', models.DateField(verbose_name='Graduated')),
                ('speciality', models.CharField(max_length=50, verbose_name='Speciality')),
                ('institute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='educations', to='users.Institute', verbose_name='Institute')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='educations', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Education',
                'verbose_name_plural': 'Educations',
                'ordering': ['pk'],
            },
        ),
    ]
